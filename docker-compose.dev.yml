version: '3.9'

networks:
  microservice-network:
    driver: bridge

services:

  consul:
    image: consul:latest
    command: consul agent -dev -log-level=warn -ui -client=0.0.0.0
    hostname: consul
    container_name: consul
    ports:
      - "8500:8500"
    networks:
      - microservice-network

  servicesqlserver:
    container_name: servicesqlserver
    hostname: servicesqlserver
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports:
      - "1433:1433"
    environment:
      SA_PASSWORD: ${SERVICE_SA_PASSWORD}
      ACCEPT_EULA: "Y"
    networks:
      - microservice-network

  webapigateway:
    container_name: webapigateway
    hostname: webapigateway
    restart: on-failure
    build:
      context: .
      dockerfile: /webapigateway/Dockerfile.apigateway.web.dev
    ports:
      - 14798:80
    depends_on:
      - consul
      - jaeger
    environment:
      - ASPNETCORE_ENVIRONMENT=${RUNNING_ENVIRONMENT}            
      - JWTCONFIG__Secret=${JWTCONFIG__Secret}
      - JWTCONFIG__Duration=${JWTCONFIG__Duration}
      - JWTCONFIG__Issuer=${JWTCONFIG__Issuer}
      - JWTCONFIG__Audience=${JWTCONFIG__Audience}
      - JWTCONFIG__RefreshTokenDuration=${JWTCONFIG__RefreshTokenDuration}
      - AUTHENTICATION_PROVIDERKEY=${AUTHENTICATION_PROVIDERKEY}
    networks:
      - microservice-network

  identityservice:
    container_name: identityservice
    hostname: identityservice
    restart: on-failure
    build:
      context: .
      dockerfile: /identityservice/Dockerfile.identityservice.dev
    depends_on:
      - servicesqlserver
      - consul
      - webapigateway
      - jaeger
    ports:
      - ${IDENTITYSERVICE_PORT}:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${RUNNING_ENVIRONMENT}            
      - JWTCONFIG__Secret=${JWTCONFIG__Secret}
      - JWTCONFIG__Duration=${JWTCONFIG__Duration}
      - JWTCONFIG__Issuer=${JWTCONFIG__Issuer}
      - JWTCONFIG__Audience=${JWTCONFIG__Audience}
      - JWTCONFIG__RefreshTokenDuration=${JWTCONFIG__RefreshTokenDuration}
      - AUTHENTICATION_PROVIDERKEY=${AUTHENTICATION_PROVIDERKEY}
      - IDENTITY_DEFAULTCONNECTION=${IDENTITY_DEFAULTCONNECTION}
      - CONSULHOSTINFO__ConsulHost=${CONSULHOSTINFO__ConsulHost}
      - CONSULHOSTINFO__ConsulPort=${CONSULHOSTINFO__ConsulPort}
      - CONSULIDENTITYSERVICEINFO__ServiceIp=${CONSULIDENTITYSERVICEINFO__ServiceIp}
      - CONSULIDENTITYSERVICEINFO__ServicePort=${CONSULIDENTITYSERVICEINFO__ServicePort}
      - CONSULIDENTITYSERVICEINFO__ServiceName=${CONSULIDENTITYSERVICEINFO__ServiceName}
    networks:
      - microservice-network

  bookcatalogservice:
    container_name: bookcatalogservice
    hostname: bookcatalogservice
    restart: on-failure
    build:
      context: .
      dockerfile: /bookcatalogservice/Dockerfile.bookcatalogservice.dev
    depends_on:
      - servicesqlserver
      - consul
      - webapigateway
      - jaeger
      - logstashoutput
    ports:
      - ${CATALOGSERVICE_PORT}:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${RUNNING_ENVIRONMENT}            
      - JWTCONFIG__Secret=${JWTCONFIG__Secret}
      - JWTCONFIG__Duration=${JWTCONFIG__Duration}
      - JWTCONFIG__Issuer=${JWTCONFIG__Issuer}
      - JWTCONFIG__Audience=${JWTCONFIG__Audience}
      - JWTCONFIG__RefreshTokenDuration=${JWTCONFIG__RefreshTokenDuration}
      - AUTHENTICATION_PROVIDERKEY=${AUTHENTICATION_PROVIDERKEY}
      - CATALOG_DEFAULTCONNECTION=${CATALOG_DEFAULTCONNECTION}
      - CONSULHOSTINFO__ConsulHost=${CONSULHOSTINFO__ConsulHost}
      - CONSULHOSTINFO__ConsulPort=${CONSULHOSTINFO__ConsulPort}
      - CONSULCATALOGSERVICEINFO__ServiceIp=${CONSULCATALOGSERVICEINFO__ServiceIp}
      - CONSULCATALOGSERVICEINFO__ServicePort=${CONSULCATALOGSERVICEINFO__ServicePort}
      - CONSULCATALOGSERVICEINFO__ServiceName=${CONSULCATALOGSERVICEINFO__ServiceName}
    networks:
      - microservice-network

  reviewservice:
    container_name: reviewservice
    hostname: reviewservice
    restart: on-failure
    build:
      context: .
      dockerfile: /reviewservice/Dockerfile.reviewservice.dev
    depends_on:
      - servicesqlserver
      - consul
      - webapigateway
      - jaeger
    ports:
      - ${REVIEWSERVICE_PORT}:80
    environment:
      - ASPNETCORE_ENVIRONMENT=${RUNNING_ENVIRONMENT}            
      - JWTCONFIG__Secret=${JWTCONFIG__Secret}
      - JWTCONFIG__Duration=${JWTCONFIG__Duration}
      - JWTCONFIG__Issuer=${JWTCONFIG__Issuer}
      - JWTCONFIG__Audience=${JWTCONFIG__Audience}
      - JWTCONFIG__RefreshTokenDuration=${JWTCONFIG__RefreshTokenDuration}
      - AUTHENTICATION_PROVIDERKEY=${AUTHENTICATION_PROVIDERKEY}
      - REVIEW_DEFAULTCONNECTION=${REVIEW_DEFAULTCONNECTION}
      - CONSULHOSTINFO__ConsulHost=${CONSULHOSTINFO__ConsulHost}
      - CONSULHOSTINFO__ConsulPort=${CONSULHOSTINFO__ConsulPort}
      - CONSULREVIEWSERVICEINFO__ServiceIp=${CONSULREVIEWSERVICEINFO__ServiceIp}
      - CONSULREVIEWSERVICEINFO__ServicePort=${CONSULREVIEWSERVICEINFO__ServicePort}
      - CONSULREVIEWSERVICEINFO__ServiceName=${CONSULREVIEWSERVICEINFO__ServiceName}
    networks:
      - microservice-network

  prometheus:
    container_name: prometheus
    hostname: prometheus
    build: 
      context: .
      dockerfile: Dockerfile.prometheus.dev
    ports:
      - "9090:9090"
    depends_on:
      - bookcatalogservice
      - identityservice
      - reviewservice
      - webapigateway
    networks:
      - microservice-network

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    hostname: grafana
    ports:
      - "3001:3000"   
    depends_on:
      - prometheus
    networks:
      - microservice-network

  jaeger:
    image: jaegertracing/all-in-one:1.40
    container_name: jaeger
    hostname: jaeger
    restart: unless-stopped
    ports:
      - 5775:5775/udp
      - 5778:5778
      - 6831:6831/udp
      - 6832:6832/udp
      - 9411:9411
      - 14250:14250
      - 14268:14268
      - 14269:14269
      - 16686:16686
      - 4317:4317
      - 4318:4318
    networks:
      - microservice-network

  logstashoutput:
    container_name: logstashoutput
    hostname: logstashoutput
    build: 
      context: .
      dockerfile: Dockerfile.logstashoutput.dev
    ports:
      - "5044:5044"
    depends_on:
      - rabbitmq
    networks:
      - microservice-network
    environment:
      - ELASTIC_CONTAINER=false

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - microservice-network

  logstashinput:
    container_name: logstashinput
    hostname: logstashinput
    build: 
      context: .
      dockerfile: Dockerfile.logstashinput.dev
    ports:
      - "5045:5045"
    depends_on:
      - rabbitmq
      - elasticsearch
    networks:
      - microservice-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.2
    container_name: elasticsearch
    hostname: elasticsearch
    environment:
      - node.name=es-node
      - cluster.name=es-cluster
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - microservice-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.2
    container_name: kibana
    hostname: kibana
    ports:
      - 5601:5601
    networks:
      - microservice-network
    depends_on:
      - elasticsearch
    restart: 'unless-stopped'